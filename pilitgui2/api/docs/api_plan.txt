2022-07-18 Notes:

* Revisit models and crud files. I'm missing foreign keys or look up methods to do things like "get channels for a show with show_id = 123" and so forth
* Will also need to add those to the routers
* Need to decide on approach for retrieving all clips, for all channels, for a given show, for a given time-slice
    * Could do sparse + fill_in approach of the v1 player (a "compile" process, for example could create a temp table filled with 1/2-second by 1/2-second clip entries)
    * Could do sparse entries, that note the start_time of a clip, then use a "time between A and B" type query" to retrieve the clips (See https://stackoverflow.com/a/65431354/292947 for a couple of performant ways to do "time between A and B" type queries)



-----------------------------------------------------------------

###############################
# SHOWS
###############################
/shows GET
    â†©ï¸Ž [<SHOW...>]
/shows/<show_id> GET
    â†©ï¸Ž <SHOW...>
/shows POST
    ðŸ“„ same as <SHOW...>, name required; show_id, create_date, and edit_date not allowed
    â†©ï¸Ž <SHOW...>
/shows/<show_id> DELETE
    â†©ï¸Ž show_id (of the deleted show)

###############################
# CHANNELS
###############################
/channels/<show_id> GET
    â†©ï¸Ž [<CHANNEL...>]
/channels/<channel_id> GET
    â†©ï¸Ž <CHANNEL...>
/channels POST
    ðŸ“„ same as <CHANNEL...>, name, show_id, channel_type_id, default_animation_type required
    â†©ï¸Ž <CHANNEL...>
/channels PUT
    ðŸ“„ [ channel_id, channel_id, ... ] (in new desired sequence)
    â†©ï¸Ž 200
/channels/<channel_id> DELETE
    â†©ï¸Ž channel_id (of the deleted channel)

###############################
# CLIPS
###############################
/clips/<channel_id> GET
    â†©ï¸Ž [<CLIP...>]
/clips/<clip_id> GET
    â†©ï¸Ž <CLIP...>
/clips POST
    ðŸ“„ same as <CLIP...>, name, channel_id, sequence, animation_type_id, animation_params required
    â†©ï¸Ž <CLIP...>
/clips PUT
    ðŸ“„ [ clip_id, clip_id, ... ] (in new desired sequence)
    â†©ï¸Ž 200
/clips/<clip_id> DELETE
    â†©ï¸Ž clip_id (of the deleted clip)

###############################
# CHANNEL TYPES
###############################
/channel_types GET
    â†©ï¸Ž [<CHANNELS_TYPE...>]
/channel_types/<channel_type_id> GET
    â†©ï¸Ž <CHANNELS_TYPE...>
/channel_types POST
    ðŸ“„ same as <CHANNELS_TYPE...>, name, channel_id, sequence, animation_type_id, animation_params required
    â†©ï¸Ž <CHANNELS_TYPE...>
/channel_types/<channel_type_id> DELETE
    â†©ï¸Ž channel_type_id (of the deleted channel_type)

###############################
# ANIMATION TYPES
###############################
/animation_types GET
    â†©ï¸Ž [<ANIMATION_TYPE...>]
/animation_types/<animation_type_id> GET
    â†©ï¸Ž <ANIMATION_TYPE...>
/animation_types POST
    ðŸ“„ same as <ANIMATION_TYPE...>, name, animation_params required
    â†©ï¸Ž <ANIMATION_TYPE...>
/animation_types/<animation_type_id> DELETE
    â†©ï¸Ž animation_type_id (of the deleted animation_type)

###############################
# SCHEDULES
###############################
/schedules GET
    â†©ï¸Ž [<SCHEDULE_TYPE...>]
/schedules/<schedule_id> GET
    â†©ï¸Ž <SCHEDULE_TYPE...>
/schedules POST
    ðŸ“„ same as <SCHEDULE_TYPE...>, all but the ID required
    â†©ï¸Ž <SCHEDULE_TYPE...>
/schedules/<schedule_id> DELETE
    â†©ï¸Ž schedule_id (of the deleted animation_type)
/schedules/{schedule_id}/activate
    * adds a cron job on the server to kick off the show schedule at the start time
/schedules/{schedule_id}/deactivate
    * removes the cron entry so that the show is no longer run at the scheduled time

--------------------------------
- Schema
--------------------------------

SHOW
    {
        "show_id": integer,
        "name": string,
        "create_date": string,
        "edit_date": string,
        "description": string
    }
CHANNEL
    {
        "channel_id": integer,
        "name": string,
        "description": string
        "show_id": integer, (FK)
        "channel_type_id": integer, (FK)
        "icon": string,
        "sequence": integer,

    }
CLIP
    {
        "clip_id": string,
        "channel_id": integer, (FK)
        "name": string,
        "sequence": integer,
        "animation_type_id": integer,
        "animation_params": <ANIMATION_PARAMS>,
        "duration": integer,
        "class_name": string,
    }
ANIMATION_PARAMS
    {
        "required": [<ANIM_PARAM>],
        "optional": [<ANIM_PARAM>],
    }
ANIM_PARAM
    {
        "name": string,
        "data_type": VALID_JSON_VALUE_TYPE,
        "value": VALID_VALUE,
        "default_value": VALID_VALUE,
    }
CHANNELS_TYPE
    {
        "channel_type_id": integer,
        "name": string,
        "animation_type_id": integer,  (FK)
        "default_animation_type_id": integer (FK, animation_type_id)
        "default_animation_params": <ANIMATION_PARAMS>,
        "class_name": string
    }
ANIMATION_TYPE
    {
        "animation_type_id": integer,
        "name": string,
        "animation_params": <ANIMATION_PARAMS>,
    }
SCHEDULE_TYPE
    {
        "schedule_id": integer,
        "name": string,
        "days_of_week": ENUM(AMTWHFSU), // (all, monday, tues, wed, thu, fri, sat, sun)
        "start_time": ut_timestamp,
        "duration": integer, // seconds
        "show_id": integer,  (FK)
    }
